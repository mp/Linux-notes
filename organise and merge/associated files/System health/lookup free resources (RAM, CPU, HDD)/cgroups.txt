Alternative to ulimit (RH442 Lab book, p.104). Allows limiting memory and CPU time per application.
Kernel partitions available resources depending on the limit configuration.

Limits CPU shares, memory usage, block device usage.

E.g. limit application A to 1/3rd of CPU. Limit application 2 to 2/3rds of application. 

systemd-cgtop
A single command runs inside systemd-run --slice example.slice 10d	(10 days)

Ability to control memory
[Service]
Slice=works.slice
MemoryAccounting=true		Like the user/group limits for the Hadoop Hive queue
MemoryLimit=1G			Like VMware virtual machines, but by application or user
BlockIO*			Block storage restriction
CPUShares=2048			CPU shares limit
LimitNOFILE=64			Limit number of open files
LimitNPROC=32			Limit number of processes
		
/etc/systemd/system/cpuload.service.d/10-service.conf	put services into a slice
systemctl daemon-reload

See RH442 lab slides, p.254 for example of how to CPU shares for applications
sudo sytemctl start cpuload1.service cpuload2.service
sudo sytemctl enable cpuload1.service cpuload2.service
sudo sytemctl set-property cpuload1.service CPUAccounting=yes
sudo sytemctl set-property cpuload2.service CPUAccounting=yes
systemctl daemon-reload
systemd-cgtop		
systemctl disable cpuload1.service cpuload2.service

Application pinning is where applications are started on particular CPUs for the entire execution (RH442, p.257)
[service]
CPUAffinity="2-4"
It is possible to make application exclusive to a dedicated CPU, which improves its performance.
To see which CPUs an application is running on do:
ps mo pid,comm, psr $(pgrep httpd)

IRQbalance oneshot is another way of balancing application usage amongst CPU sets (/etc/sysconfig/irqbalance). See: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-red_hat_enterprise_linux-performance_tuning_guide-performance_monitoring_tools-irqbalance


